/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.20.3
// source: awesomechat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
var proto = require('./awesomechat_pb.js')

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ChatCoreClient =
  function (hostname, credentials, options) {
    if (!options) options = {};
    options.format = 'text';

    /**
     * @private @const {!grpc.web.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.web.GrpcWebClientBase(options);

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '');

  };


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ChatCorePromiseClient =
  function (hostname, credentials, options) {
    if (!options) options = {};
    options.format = 'text';

    /**
     * @private @const {!grpc.web.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.web.GrpcWebClientBase(options);

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '');

  };


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.User,
 *   !proto.CreateUserResponse>}
 */
const methodDescriptor_ChatCore_CreateUser = new grpc.web.MethodDescriptor(
  '/ChatCore/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.User,
  proto.CreateUserResponse,
  /**
   * @param {!proto.User} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.CreateUserResponse.deserializeBinary
);


/**
 * @param {!proto.User} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.CreateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.CreateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatCoreClient.prototype.createUser =
  function (request, metadata, callback) {
    return this.client_.rpcCall(this.hostname_ +
      '/ChatCore/CreateUser',
      request,
      metadata || {},
      methodDescriptor_ChatCore_CreateUser,
      callback);
  };


/**
 * @param {!proto.User} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.CreateUserResponse>}
 *     Promise that resolves to the response
 */
proto.ChatCorePromiseClient.prototype.createUser =
  function (request, metadata) {
    return this.client_.unaryCall(this.hostname_ +
      '/ChatCore/CreateUser',
      request,
      metadata || {},
      methodDescriptor_ChatCore_CreateUser);
  };


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.User,
 *   !proto.ReceivedMessage>}
 */
const methodDescriptor_ChatCore_Connect = new grpc.web.MethodDescriptor(
  '/ChatCore/Connect',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.User,
  proto.ReceivedMessage,
  /**
   * @param {!proto.User} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.ReceivedMessage.deserializeBinary
);


/**
 * @param {!proto.User} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ReceivedMessage>}
 *     The XHR Node Readable Stream
 */
proto.ChatCoreClient.prototype.connect =
  function (request, metadata) {
    return this.client_.serverStreaming(this.hostname_ +
      '/ChatCore/Connect',
      request,
      metadata || {},
      methodDescriptor_ChatCore_Connect);
  };


/**
 * @param {!proto.User} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ReceivedMessage>}
 *     The XHR Node Readable Stream
 */
proto.ChatCorePromiseClient.prototype.connect =
  function (request, metadata) {
    return this.client_.serverStreaming(this.hostname_ +
      '/ChatCore/Connect',
      request,
      metadata || {},
      methodDescriptor_ChatCore_Connect);
  };


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.SentMessage,
 *   !proto.Empty>}
 */
const methodDescriptor_ChatCore_SendMessage = new grpc.web.MethodDescriptor(
  '/ChatCore/SendMessage',
  grpc.web.MethodType.UNARY,
  proto.SentMessage,
  proto.Empty,
  /**
   * @param {!proto.SentMessage} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.Empty.deserializeBinary
);


/**
 * @param {!proto.SentMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatCoreClient.prototype.sendMessage =
  function (request, metadata, callback) {
    return this.client_.rpcCall(this.hostname_ +
      '/ChatCore/SendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatCore_SendMessage,
      callback);
  };


/**
 * @param {!proto.SentMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Empty>}
 *     Promise that resolves to the response
 */
proto.ChatCorePromiseClient.prototype.sendMessage =
  function (request, metadata) {
    return this.client_.unaryCall(this.hostname_ +
      '/ChatCore/SendMessage',
      request,
      metadata || {},
      methodDescriptor_ChatCore_SendMessage);
  };


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Group,
 *   !proto.Empty>}
 */
const methodDescriptor_ChatCore_CreateGroupChat = new grpc.web.MethodDescriptor(
  '/ChatCore/CreateGroupChat',
  grpc.web.MethodType.UNARY,
  proto.Group,
  proto.Empty,
  /**
   * @param {!proto.Group} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.Empty.deserializeBinary
);


/**
 * @param {!proto.Group} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatCoreClient.prototype.createGroupChat =
  function (request, metadata, callback) {
    return this.client_.rpcCall(this.hostname_ +
      '/ChatCore/CreateGroupChat',
      request,
      metadata || {},
      methodDescriptor_ChatCore_CreateGroupChat,
      callback);
  };


/**
 * @param {!proto.Group} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Empty>}
 *     Promise that resolves to the response
 */
proto.ChatCorePromiseClient.prototype.createGroupChat =
  function (request, metadata) {
    return this.client_.unaryCall(this.hostname_ +
      '/ChatCore/CreateGroupChat',
      request,
      metadata || {},
      methodDescriptor_ChatCore_CreateGroupChat);
  };


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Group,
 *   !proto.Empty>}
 */
const methodDescriptor_ChatCore_JoinGroupChat = new grpc.web.MethodDescriptor(
  '/ChatCore/JoinGroupChat',
  grpc.web.MethodType.UNARY,
  proto.Group,
  proto.Empty,
  /**
   * @param {!proto.Group} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.Empty.deserializeBinary
);


/**
 * @param {!proto.Group} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatCoreClient.prototype.joinGroupChat =
  function (request, metadata, callback) {
    return this.client_.rpcCall(this.hostname_ +
      '/ChatCore/JoinGroupChat',
      request,
      metadata || {},
      methodDescriptor_ChatCore_JoinGroupChat,
      callback);
  };


/**
 * @param {!proto.Group} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Empty>}
 *     Promise that resolves to the response
 */
proto.ChatCorePromiseClient.prototype.joinGroupChat =
  function (request, metadata) {
    return this.client_.unaryCall(this.hostname_ +
      '/ChatCore/JoinGroupChat',
      request,
      metadata || {},
      methodDescriptor_ChatCore_JoinGroupChat);
  };


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Group,
 *   !proto.Empty>}
 */
const methodDescriptor_ChatCore_LeftGroupChat = new grpc.web.MethodDescriptor(
  '/ChatCore/LeftGroupChat',
  grpc.web.MethodType.UNARY,
  proto.Group,
  proto.Empty,
  /**
   * @param {!proto.Group} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.Empty.deserializeBinary
);


/**
 * @param {!proto.Group} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatCoreClient.prototype.leftGroupChat =
  function (request, metadata, callback) {
    return this.client_.rpcCall(this.hostname_ +
      '/ChatCore/LeftGroupChat',
      request,
      metadata || {},
      methodDescriptor_ChatCore_LeftGroupChat,
      callback);
  };


/**
 * @param {!proto.Group} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Empty>}
 *     Promise that resolves to the response
 */
proto.ChatCorePromiseClient.prototype.leftGroupChat =
  function (request, metadata) {
    return this.client_.unaryCall(this.hostname_ +
      '/ChatCore/LeftGroupChat',
      request,
      metadata || {},
      methodDescriptor_ChatCore_LeftGroupChat);
  };


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Empty,
 *   !proto.ListChannelsResponse>}
 */
const methodDescriptor_ChatCore_ListChannels = new grpc.web.MethodDescriptor(
  '/ChatCore/ListChannels',
  grpc.web.MethodType.UNARY,
  proto.Empty,
  proto.ListChannelsResponse,
  /**
   * @param {!proto.Empty} request
   * @return {!Uint8Array}
   */
  function (request) {
    return request.serializeBinary();
  },
  proto.ListChannelsResponse.deserializeBinary
);


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListChannelsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListChannelsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ChatCoreClient.prototype.listChannels =
  function (request, metadata, callback) {
    return this.client_.rpcCall(this.hostname_ +
      '/ChatCore/ListChannels',
      request,
      metadata || {},
      methodDescriptor_ChatCore_ListChannels,
      callback);
  };


/**
 * @param {!proto.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListChannelsResponse>}
 *     Promise that resolves to the response
 */
proto.ChatCorePromiseClient.prototype.listChannels =
  function (request, metadata) {
    return this.client_.unaryCall(this.hostname_ +
      '/ChatCore/ListChannels',
      request,
      metadata || {},
      methodDescriptor_ChatCore_ListChannels);
  };


module.exports = proto;

